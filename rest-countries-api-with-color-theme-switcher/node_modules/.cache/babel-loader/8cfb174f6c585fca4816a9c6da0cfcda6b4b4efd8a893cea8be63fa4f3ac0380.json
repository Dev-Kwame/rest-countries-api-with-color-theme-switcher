{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amen Gezoh\\\\Desktop\\\\rest-countries-api-with-color-theme-switcher\\\\rest-countries-api-with-color-theme-switcher\\\\src\\\\components\\\\countriesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryList = ({\n  isDarkMode,\n  selectedRegion,\n  searchCountry\n}) => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://restcountries.com/v3.1/all');\n        const data = await response.json();\n        setCountries(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const getFullCountryName = async acronym => {\n    try {\n      const response = await fetch(`https://restcountries.com/v3.1/alpha/${acronym}`);\n      const data = await response.json();\n      return data.name.common;\n    } catch (error) {\n      console.error(`Error fetching full name for ${acronym}:`, error);\n      return acronym; // Return the acronym if there's an error\n    }\n  };\n\n  const handleCountryClick = country => {\n    // Store selected country in localStorage\n    localStorage.setItem('selectedCountry', JSON.stringify(country));\n  };\n  const filteredCountries = countries.filter(country => {\n    const matchesRegion = selectedRegion && selectedRegion !== 'all' ? country.region === selectedRegion : true;\n    const matchesSearchCountry = country.name.common.toLowerCase().includes(searchCountry.toLowerCase());\n    return matchesRegion && matchesSearchCountry;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"country-card\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"country-grid\",\n      children: filteredCountries.map(country => /*#__PURE__*/_jsxDEV(Link, {\n        className: \"text\",\n        to: `/country/${encodeURIComponent(country.name.common)}`,\n        onClick: () => handleCountryClick(country),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `countryItem ${isDarkMode ? 'dark' : 'light'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: country.flags.png,\n            alt: \"Flag\",\n            className: \"countryImg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            id: \"country-name\",\n            children: country.name.common\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Population: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this), country.population.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Region:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this), \" \", country.region]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Capital: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this), country.capital]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: country.borders && country.borders.map(async border => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: await getFullCountryName(border)\n            }, border, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)]\n        }, country.capital, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this)\n      }, country.name.common, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_s(CountryList, \"u5xOCJaVOCLA9QSfvEC1BLxOVIw=\");\n_c = CountryList;\nexport default CountryList;\nvar _c;\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","CountryList","isDarkMode","selectedRegion","searchCountry","_s","countries","setCountries","fetchData","response","fetch","data","json","error","console","getFullCountryName","acronym","name","common","handleCountryClick","country","localStorage","setItem","JSON","stringify","filteredCountries","filter","matchesRegion","region","matchesSearchCountry","toLowerCase","includes","className","children","map","to","encodeURIComponent","onClick","src","flags","png","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","population","toLocaleString","capital","borders","border","_c","$RefreshReg$"],"sources":["C:/Users/Amen Gezoh/Desktop/rest-countries-api-with-color-theme-switcher/rest-countries-api-with-color-theme-switcher/src/components/countriesList.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport { Link, } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n export interface Country {\r\n    name: {\r\n    common: string;\r\n    nativeName: {\r\n      [key: string]: {\r\n        official: string;\r\n        common: string;\r\n      };\r\n    };\r\n   \r\n  };\r\n\r\n        flags: {\r\n            svg: string;\r\n            png: string;\r\n          };\r\n       \r\n        population: number;\r\n        region: string;\r\n        capital: string;\r\n        subregion: string;\r\n        borders: string[];\r\n        tld: string;\r\n        languages: {\r\n          [key: string]: string;\r\n        };\r\n        currencies: {\r\n          [key: string]: {\r\n            name: string;\r\n          \r\n          };\r\n        };\r\n        \r\n        \r\n       \r\n      \r\n }\r\n       \r\n\r\n\r\n      interface CountryListProps {\r\n        isDarkMode: boolean;\r\n        selectedRegion: string | null;\r\n        searchCountry: string;\r\n        \r\n      }\r\n  \r\n\r\n\r\n      \r\n      \r\n     \r\n      \r\n  const CountryList: React.FC<CountryListProps> = ({isDarkMode, selectedRegion,searchCountry}) => {\r\n    const [countries, setCountries] = useState<Country[]>([]);\r\n \r\n\r\n  \r\n    \r\n  \r\n\r\n   \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://restcountries.com/v3.1/all');\r\n        const data = await response.json();\r\n     \r\n        setCountries(data);\r\n      \r\n    \r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n      \r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const getFullCountryName = async (acronym: string) => {\r\n    try {\r\n      const response = await fetch(`https://restcountries.com/v3.1/alpha/${acronym}`);\r\n      const data = await response.json();\r\n      return data.name.common;\r\n    } catch (error) {\r\n      console.error(`Error fetching full name for ${acronym}:`, error);\r\n      return acronym; // Return the acronym if there's an error\r\n    }\r\n  };\r\n\r\n  const handleCountryClick = (country: any) => {\r\n    // Store selected country in localStorage\r\n    localStorage.setItem('selectedCountry', JSON.stringify(country));\r\n  };\r\n\r\n  \r\n\r\n\r\n \r\n  \r\n  const filteredCountries = countries.filter((country) => {\r\n    const matchesRegion = selectedRegion && selectedRegion !== 'all'\r\n      ? country.region === selectedRegion\r\n      : true;\r\n\r\n    const matchesSearchCountry = country.name.common.toLowerCase().includes(searchCountry.toLowerCase());\r\n\r\n    return matchesRegion && matchesSearchCountry;\r\n  });\r\n\r\n\r\n \r\n  \r\n\r\n\r\n  return (\r\n    \r\n        <div className='country-card'>\r\n          \r\n      <ul className='country-grid'>\r\n     \r\n            {filteredCountries.map((country) =>(\r\n            <Link className='text' key={country.name.common} to={`/country/${encodeURIComponent(country.name.common)}`} \r\n            onClick={() => handleCountryClick(country)}> \r\n              <div key={country.capital }className={`countryItem ${isDarkMode ? 'dark' : 'light'}`}>\r\n            <img src={country.flags.png} alt=\"Flag\" className='countryImg'/>\r\n             <li id='country-name'>{country.name.common}</li>\r\n              <li><span>Population: </span>{country.population.toLocaleString()}</li>\r\n              <li><span>Region:</span> {country.region}</li>\r\n              <li><span>Capital: </span>{country.capital}</li>  \r\n\r\n              <ul>\r\n            {country.borders &&\r\n              country.borders.map(async (border) => (\r\n                <li key={border}>{await getFullCountryName(border)}</li>\r\n              ))}\r\n          </ul>\r\n              \r\n           \r\n          \r\n              \r\n            </div> \r\n           </Link>\r\n        ))}\r\n      </ul>\r\n    \r\n      </div>\r\n   \r\n  );\r\n};\r\n\r\nexport default CountryList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}