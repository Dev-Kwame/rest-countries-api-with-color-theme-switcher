{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amen Gezoh\\\\Desktop\\\\rest-countries-api-with-color-theme-switcher\\\\rest-countries-api-with-color-theme-switcher\\\\src\\\\components\\\\countriesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryList = ({\n  isDarkMode,\n  selectedRegion,\n  searchCountry\n}) => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://restcountries.com/v3.1/all');\n        const data = await response.json();\n        // Create a mapping of country codes to country names\n        const borderCountriesData = {};\n        data.forEach(country => {\n          const alphaCode = country.borders && country.borders.length > 0 ? country.borders[0] : null;\n          if (alphaCode) {\n            borderCountriesData[alphaCode] = country.name.common;\n          }\n        });\n        setCountries(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleCountryClick = country => {\n    // Store selected country in localStorage\n    localStorage.setItem('selectedCountry', JSON.stringify(country));\n  };\n  const filteredCountries = countries.filter(country => {\n    const matchesRegion = selectedRegion && selectedRegion !== 'all' ? country.region === selectedRegion : true;\n    const matchesSearchCountry = country.name.common.toLowerCase().includes(searchCountry.toLowerCase());\n    return matchesRegion && matchesSearchCountry;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"country-card\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"country-grid\",\n      children: filteredCountries.map(country => /*#__PURE__*/_jsxDEV(Link, {\n        className: \"text\",\n        to: `/country/${encodeURIComponent(country.name.common)}`,\n        onClick: () => handleCountryClick(country),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `countryItem ${isDarkMode ? 'dark' : 'light'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: country.flags.png,\n            alt: \"Flag\",\n            className: \"countryImg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            id: \"country-name\",\n            children: country.name.common\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Population: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }, this), country.population.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Region:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this), \" \", country.region]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Capital: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this), country.capital]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, country.capital, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this)\n      }, country.name.common, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(CountryList, \"u5xOCJaVOCLA9QSfvEC1BLxOVIw=\");\n_c = CountryList;\nexport default CountryList;\nvar _c;\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","CountryList","isDarkMode","selectedRegion","searchCountry","_s","countries","setCountries","fetchData","response","fetch","data","json","borderCountriesData","forEach","country","alphaCode","borders","length","name","common","error","console","handleCountryClick","localStorage","setItem","JSON","stringify","filteredCountries","filter","matchesRegion","region","matchesSearchCountry","toLowerCase","includes","className","children","map","to","encodeURIComponent","onClick","src","flags","png","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","population","toLocaleString","capital","_c","$RefreshReg$"],"sources":["C:/Users/Amen Gezoh/Desktop/rest-countries-api-with-color-theme-switcher/rest-countries-api-with-color-theme-switcher/src/components/countriesList.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport { Link, } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n export interface Country {\r\n    name: {\r\n    common: string;\r\n    nativeName: {\r\n      [key: string]: {\r\n        official: string;\r\n        common: string;\r\n      };\r\n    };\r\n   \r\n  };\r\n\r\n        flags: {\r\n            svg: string;\r\n            png: string;\r\n          };\r\n       \r\n        population: number;\r\n        region: string;\r\n        capital: string;\r\n        subregion: string;\r\n        borders: string[];\r\n        tld: string;\r\n        languages: {\r\n          [key: string]: string;\r\n        };\r\n        currencies: {\r\n          [key: string]: {\r\n            name: string;\r\n          \r\n          };\r\n        };\r\n       \r\n      \r\n }\r\n       \r\n\r\n\r\n      interface CountryListProps {\r\n        isDarkMode: boolean;\r\n        selectedRegion: string | null;\r\n        searchCountry: string;\r\n        \r\n      }\r\n  \r\n\r\n\r\n      \r\n      \r\n     \r\n      \r\n  const CountryList: React.FC<CountryListProps> = ({isDarkMode, selectedRegion,searchCountry}) => {\r\n    const [countries, setCountries] = useState<Country[]>([]);\r\n  \r\n\r\n   \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://restcountries.com/v3.1/all');\r\n        const data = await response.json();\r\n        // Create a mapping of country codes to country names\r\n      const borderCountriesData: { [key: string]: string } = {};\r\n      data.forEach(country => {\r\n        const alphaCode = country.borders && country.borders.length > 0 ? country.borders[0] : null;\r\n        if (alphaCode) {\r\n          borderCountriesData[alphaCode] = country.name.common;\r\n        }\r\n      });\r\n        setCountries(data);\r\n\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        \r\n\r\n      }\r\n      \r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleCountryClick = (country: any) => {\r\n    // Store selected country in localStorage\r\n    localStorage.setItem('selectedCountry', JSON.stringify(country));\r\n  };\r\n\r\n\r\n \r\n  \r\n  const filteredCountries = countries.filter((country) => {\r\n    const matchesRegion = selectedRegion && selectedRegion !== 'all'\r\n      ? country.region === selectedRegion\r\n      : true;\r\n\r\n    const matchesSearchCountry = country.name.common.toLowerCase().includes(searchCountry.toLowerCase());\r\n\r\n    return matchesRegion && matchesSearchCountry;\r\n  });\r\n\r\n\r\n \r\n  \r\n\r\n\r\n  return (\r\n    \r\n        <div className='country-card'>\r\n          \r\n      <ul className='country-grid'>\r\n     \r\n            {filteredCountries.map((country) =>(\r\n            <Link className='text' key={country.name.common} to={`/country/${encodeURIComponent(country.name.common)}`} \r\n            onClick={() => handleCountryClick(country)}> \r\n              <div key={country.capital }className={`countryItem ${isDarkMode ? 'dark' : 'light'}`}>\r\n            <img src={country.flags.png} alt=\"Flag\" className='countryImg'/>\r\n             <li id='country-name'>{country.name.common}</li>\r\n              <li><span>Population: </span>{country.population.toLocaleString()}</li>\r\n              <li><span>Region:</span> {country.region}</li>\r\n              <li><span>Capital: </span>{country.capital}</li>  \r\n          \r\n              \r\n            </div> \r\n           </Link>\r\n        ))}\r\n      </ul>\r\n    \r\n      </div>\r\n   \r\n  );\r\n};\r\n\r\nexport default CountryList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}