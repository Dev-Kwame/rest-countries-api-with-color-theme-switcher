{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amen Gezoh\\\\Desktop\\\\rest-countries-api-with-color-theme-switcher\\\\rest-countries-api-with-color-theme-switcher\\\\src\\\\components\\\\countriesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryList = ({\n  isDarkMode,\n  selectedRegion,\n  searchCountry\n}) => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [borderMappings, setBorderMappings] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://restcountries.com/v3.1/all');\n        const data = await response.json();\n        setCountries(data);\n\n        // Construct mapping of acronyms to full names\n        const borderMappings = {};\n        data.forEach(country => {\n          country.borders.forEach(borderAcronym => {\n            if (!borderMappings[borderAcronym]) {\n              borderMappings[borderAcronym] = '';\n            }\n          });\n        });\n\n        // Fetch detailed information for borders\n        await Promise.all(Object.keys(borderMappings).map(async borderAcronym => {\n          const borderResponse = await fetch(`https://restcountries.com/v3.1/alpha/${borderAcronym}`);\n          const borderData = await borderResponse.json();\n          borderMappings[borderAcronym] = borderData.name.common;\n        }));\n        setBorderMappings(borderMappings);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleCountryClick = country => {\n    // Store selected country in localStorage\n    localStorage.setItem('selectedCountry', JSON.stringify(country));\n  };\n  const filteredCountries = countries.filter(country => {\n    const matchesRegion = selectedRegion && selectedRegion !== 'all' ? country.region === selectedRegion : true;\n    const matchesSearchCountry = country.name.common.toLowerCase().includes(searchCountry.toLowerCase());\n    return matchesRegion && matchesSearchCountry;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"country-card\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"country-grid\",\n      children: filteredCountries.map(country => /*#__PURE__*/_jsxDEV(Link, {\n        className: \"text\",\n        to: `/country/${encodeURIComponent(country.name.common)}`,\n        onClick: () => handleCountryClick(country),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `countryItem ${isDarkMode ? 'dark' : 'light'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: country.flags.png,\n            alt: \"Flag\",\n            className: \"countryImg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            id: \"country-name\",\n            children: country.name.common\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Population: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this), country.population.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Region:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this), \" \", country.region]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Capital: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this), country.capital]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, country.capital, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this)\n      }, country.name.common, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n_s(CountryList, \"uGTRului+RJ1kpjaWJzk/ISUzZQ=\");\n_c = CountryList;\nexport default CountryList;\nvar _c;\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","CountryList","isDarkMode","selectedRegion","searchCountry","_s","countries","setCountries","borderMappings","setBorderMappings","fetchData","response","fetch","data","json","forEach","country","borders","borderAcronym","Promise","all","Object","keys","map","borderResponse","borderData","name","common","error","console","handleCountryClick","localStorage","setItem","JSON","stringify","filteredCountries","filter","matchesRegion","region","matchesSearchCountry","toLowerCase","includes","className","children","to","encodeURIComponent","onClick","src","flags","png","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","population","toLocaleString","capital","_c","$RefreshReg$"],"sources":["C:/Users/Amen Gezoh/Desktop/rest-countries-api-with-color-theme-switcher/rest-countries-api-with-color-theme-switcher/src/components/countriesList.tsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport { Link, } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n export interface Country {\r\n    name: {\r\n    common: string;\r\n    nativeName: {\r\n      [key: string]: {\r\n        official: string;\r\n        common: string;\r\n      };\r\n    };\r\n   \r\n  };\r\n\r\n        flags: {\r\n            svg: string;\r\n            png: string;\r\n          };\r\n       \r\n        population: number;\r\n        region: string;\r\n        capital: string;\r\n        subregion: string;\r\n        borders: string[];\r\n        tld: string;\r\n        languages: {\r\n          [key: string]: string;\r\n        };\r\n        currencies: {\r\n          [key: string]: {\r\n            name: string;\r\n          \r\n          };\r\n        };\r\n        \r\n        \r\n       \r\n      \r\n }\r\n       \r\n\r\n\r\n      interface CountryListProps {\r\n        isDarkMode: boolean;\r\n        selectedRegion: string | null;\r\n        searchCountry: string;\r\n        \r\n      }\r\n  \r\n\r\n\r\n      \r\n      \r\n     \r\n      \r\n  const CountryList: React.FC<CountryListProps> = ({isDarkMode, selectedRegion,searchCountry}) => {\r\n    const [countries, setCountries] = useState<Country[]>([]);\r\n    const [borderMappings, setBorderMappings] = useState<{ [key: string]: string }>({});\r\n   \r\n\r\n  \r\n    \r\n  \r\n\r\n   \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://restcountries.com/v3.1/all');\r\n        const data = await response.json();\r\n     \r\n        setCountries(data);\r\n\r\n           // Construct mapping of acronyms to full names\r\n           const borderMappings: { [key: string]: string } = {};\r\n           data.forEach((country) => {\r\n             country.borders.forEach((borderAcronym: string) => {\r\n               if (!borderMappings[borderAcronym]) {\r\n                 borderMappings[borderAcronym] = '';\r\n               }\r\n             });\r\n           });\r\n   \r\n           // Fetch detailed information for borders\r\n           await Promise.all(\r\n             Object.keys(borderMappings).map(async (borderAcronym) => {\r\n               const borderResponse = await fetch(`https://restcountries.com/v3.1/alpha/${borderAcronym}`);\r\n               const borderData = await borderResponse.json();\r\n               borderMappings[borderAcronym] = borderData.name.common;\r\n             })\r\n           );\r\n   \r\n           setBorderMappings(borderMappings);\r\n      \r\n    \r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n      \r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleCountryClick = (country: any) => {\r\n    // Store selected country in localStorage\r\n    localStorage.setItem('selectedCountry', JSON.stringify(country));\r\n  };\r\n\r\n  \r\n\r\n\r\n \r\n  \r\n  const filteredCountries = countries.filter((country) => {\r\n    const matchesRegion = selectedRegion && selectedRegion !== 'all'\r\n      ? country.region === selectedRegion\r\n      : true;\r\n\r\n    const matchesSearchCountry = country.name.common.toLowerCase().includes(searchCountry.toLowerCase());\r\n\r\n    return matchesRegion && matchesSearchCountry;\r\n  });\r\n\r\n\r\n \r\n  \r\n\r\n\r\n  return (\r\n    \r\n        <div className='country-card'>\r\n          \r\n      <ul className='country-grid'>\r\n     \r\n            {filteredCountries.map((country) =>(\r\n            <Link className='text' key={country.name.common} to={`/country/${encodeURIComponent(country.name.common)}`} \r\n            onClick={() => handleCountryClick(country)}> \r\n              <div key={country.capital }className={`countryItem ${isDarkMode ? 'dark' : 'light'}`}>\r\n            <img src={country.flags.png} alt=\"Flag\" className='countryImg'/>\r\n             <li id='country-name'>{country.name.common}</li>\r\n              <li><span>Population: </span>{country.population.toLocaleString()}</li>\r\n              <li><span>Region:</span> {country.region}</li>\r\n              <li><span>Capital: </span>{country.capital}</li>  \r\n       \r\n        \r\n          \r\n              \r\n            </div> \r\n           </Link>\r\n        ))}\r\n      </ul>\r\n    \r\n      </div>\r\n   \r\n  );\r\n};\r\n\r\nexport default CountryList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}