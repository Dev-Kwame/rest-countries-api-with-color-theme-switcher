{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useParams,Link}from'react-router-dom';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faArrowLeft}from'@fortawesome/free-solid-svg-icons';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const CountryDetails=_ref=>{var _countryDetails$curre,_countryDetails$curre2;let{isDarkMode}=_ref;const{countryName}=useParams();const[countryDetails,setCountryDetails]=useState(null);const[borderCountriesDetails,setBorderCountriesDetails]=useState([]);const navigate=useNavigate();//Fetching country details from RESTFUL API\nuseEffect(()=>{const fetchData=async()=>{try{const response=await fetch(\"https://restcountries.com/v3.1/name/\".concat(countryName));const[data]=await response.json();setCountryDetails(data);// Fetch details of border countries\nif(Array.isArray(data.borders)&&data.borders.length>0){await fetchBorderCountries(data.borders);}}catch(error){console.error('Error fetching data:',error);}};fetchData();},[countryName]);//Fetching border country details from API\nconst fetchBorderCountries=async borderCountryCodes=>{try{const borderCountriesDetails=await Promise.all(borderCountryCodes.map(async borderCode=>{const borderResponse=await fetch(\"https://restcountries.com/v3.1/alpha/\".concat(borderCode));const borderData=await borderResponse.json();return borderData[0];}));setBorderCountriesDetails(borderCountriesDetails);}catch(error){console.error('Error fetching border countries:',error);}};if(!countryDetails){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"button\",{className:\"back-button \".concat(isDarkMode?'dark':'light'),onClick:()=>navigate(-1),children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faArrowLeft,style:{marginRight:'8px'}}),\"Back\"]})}),/*#__PURE__*/_jsx(\"div\",{className:\"center\",children:/*#__PURE__*/_jsxs(\"article\",{className:\"country-details\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{id:\"flag\",src:countryDetails.flags.svg,alt:\"Flag\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{id:\"details-header\",children:countryDetails.name.common}),/*#__PURE__*/_jsxs(\"div\",{className:\"country-details-wrapper\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"country-details-1\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Native Name: \"}),countryDetails.name.nativeName?countryDetails.name.nativeName[Object.keys(countryDetails.name.nativeName)[0]]&&countryDetails.name.nativeName[Object.keys(countryDetails.name.nativeName)[0]].common||\"\":\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Population:\"}),\" \",countryDetails.population.toLocaleString()]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Region:\"}),\" \",countryDetails.region]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Sub Region:\"}),\" \",countryDetails.subregion]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Capital:\"}),\" \",countryDetails.capital]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"country-details-2\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Top Level Domain:\"}),\"  \",Array.isArray(countryDetails.tld)&&countryDetails.tld.length>0?countryDetails.tld[0]:'']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Currencies:\"}),\"  \",((_countryDetails$curre=countryDetails.currencies)===null||_countryDetails$curre===void 0?void 0:(_countryDetails$curre2=_countryDetails$curre[Object.keys(countryDetails.currencies)[0]])===null||_countryDetails$curre2===void 0?void 0:_countryDetails$curre2.name)||'']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Languages:\"}),\" \",Object.values(countryDetails.languages||{}).join(', ')]})]})]}),/*#__PURE__*/_jsxs(\"p\",{id:\"border\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Border Countries: \"}),Array.isArray(borderCountriesDetails)&&borderCountriesDetails.length>0?borderCountriesDetails.filter(borderCountry=>{var _borderCountry$name;return typeof borderCountry!=='string'&&((_borderCountry$name=borderCountry.name)===null||_borderCountry$name===void 0?void 0:_borderCountry$name.common);})// Filter out strings and entries without full names\n.map(borderCountry=>/*#__PURE__*/_jsx(Link,{to:\"/country/\".concat(borderCountry.name.common),children:/*#__PURE__*/_jsx(\"button\",{className:\"border-button \".concat(isDarkMode?'dark':'light'),children:typeof borderCountry!=='string'?borderCountry.name.common:'Country Name Unavailable'},borderCountry.cca3)},borderCountry.name.common)):/*#__PURE__*/_jsxs(\"em\",{children:[countryDetails.name.common,\" has no border countries\"]})]})]})]})})]});};export default CountryDetails;","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","FontAwesomeIcon","faArrowLeft","useNavigate","jsx","_jsx","jsxs","_jsxs","CountryDetails","_ref","_countryDetails$curre","_countryDetails$curre2","isDarkMode","countryName","countryDetails","setCountryDetails","borderCountriesDetails","setBorderCountriesDetails","navigate","fetchData","response","fetch","concat","data","json","Array","isArray","borders","length","fetchBorderCountries","error","console","borderCountryCodes","Promise","all","map","borderCode","borderResponse","borderData","children","className","onClick","icon","style","marginRight","id","src","flags","svg","alt","name","common","nativeName","Object","keys","population","toLocaleString","region","subregion","capital","tld","currencies","values","languages","join","filter","borderCountry","_borderCountry$name","to","cca3"],"sources":["C:/Users/Amen Gezoh/Desktop/rest-countries-api-with-color-theme-switcher/rest-countries-api-with-color-theme-switcher/src/components/countriesDetails.tsx"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport {useParams, Link} from 'react-router-dom';\r\nimport { Country} from './countriesList';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\ninterface CountryDetailsprops{\r\n  isDarkMode: boolean;\r\n  \r\n\r\n}\r\n\r\n\r\n\r\nconst CountryDetails: React.FC<CountryDetailsprops> = ({isDarkMode, }) => {\r\n  const { countryName } = useParams();\r\n  const [countryDetails, setCountryDetails] = useState<Country | null>(null);\r\n  const [borderCountriesDetails, setBorderCountriesDetails] = useState<Country[]>([]);\r\n\r\n  const navigate = useNavigate();\r\n  \r\n  //Fetching country details from RESTFUL API\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`https://restcountries.com/v3.1/name/${countryName}`);\r\n        const [data] = await response.json();\r\n        setCountryDetails(data);\r\n        \r\n        // Fetch details of border countries\r\n      if (Array.isArray(data.borders) && data.borders.length > 0) {\r\n        await fetchBorderCountries(data.borders);\r\n      }\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n     \r\n    fetchData();\r\n  }, [countryName]);\r\n\r\n //Fetching border country details from API\r\n  const fetchBorderCountries = async (borderCountryCodes: string[]) => {\r\n    try {\r\n      const borderCountriesDetails = await Promise.all(\r\n        borderCountryCodes.map(async (borderCode) => {\r\n          const borderResponse = await fetch(`https://restcountries.com/v3.1/alpha/${borderCode}`);\r\n          const borderData = await borderResponse.json();\r\n          return borderData[0];\r\n        })\r\n      );\r\n  \r\n      setBorderCountriesDetails(borderCountriesDetails);\r\n    } catch (error) {\r\n      console.error('Error fetching border countries:', error);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n  if (!countryDetails) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n \r\n\r\n\r\n  return (\r\n    <div>\r\n    <div>\r\n      <button className={`back-button ${isDarkMode ? 'dark' : 'light'}`} onClick={() => navigate(-1)} ><FontAwesomeIcon icon={faArrowLeft} style={{ marginRight: '8px' }}/>Back</button>\r\n      </div>\r\n    <div className='center'>  \r\n    <article className='country-details'>\r\n       <div><img id ='flag' src={countryDetails.flags.svg} alt='Flag'/></div>\r\n        <div >\r\n          <h2 id='details-header'>{countryDetails.name.common}</h2>\r\n          <div className='country-details-wrapper'>\r\n        <div className='country-details-1'>\r\n        \r\n      <p><span>Native Name: </span> \r\n        {countryDetails.name.nativeName ? (countryDetails.name.nativeName[Object.keys(countryDetails.name.nativeName)[0]] && countryDetails.name.nativeName[Object.keys(countryDetails.name.nativeName)[0]].common) || \"\"\r\n    : \" \"}</p>\r\n      <p><span>Population:</span> {countryDetails.population.toLocaleString()}</p>\r\n      <p><span>Region:</span> {countryDetails.region}</p>\r\n      <p><span>Sub Region:</span> {countryDetails.subregion}</p>\r\n      <p><span>Capital:</span> {countryDetails.capital}</p> \r\n      </div>\r\n    <div className='country-details-2'>\r\n    <p><span>Top Level Domain:</span>  {Array.isArray(countryDetails.tld) && countryDetails.tld.length > 0\r\n    ? countryDetails.tld[0]\r\n    : ''\r\n  }\r\n</p>\r\n         <p><span>Currencies:</span>  {countryDetails.currencies?.[Object.keys(countryDetails.currencies)[0]]?.name || ''}</p>\r\n          <p><span>Languages:</span> {Object.values(countryDetails.languages || {}).join(', ')}</p> \r\n          </div>\r\n          </div>\r\n          \r\n          <p id='border'>\r\n  <span>Border Countries: </span>\r\n  {Array.isArray(borderCountriesDetails) && borderCountriesDetails.length > 0 ? (\r\n  borderCountriesDetails\r\n    .filter((borderCountry) => typeof borderCountry !== 'string' && borderCountry.name?.common) // Filter out strings and entries without full names\r\n    .map((borderCountry) => (\r\n    <Link key={borderCountry.name.common} to={`/country/${borderCountry.name.common}`}>\r\n      <button\r\n        key={borderCountry.cca3}\r\n        className={`border-button ${isDarkMode ? 'dark' : 'light'}`}\r\n      >\r\n        {typeof borderCountry !== 'string' ? borderCountry.name.common : 'Country Name Unavailable'}\r\n      </button>\r\n      </Link>\r\n    ))\r\n) : (\r\n  <em>{countryDetails.name.common} has no border countries</em>\r\n)}\r\n\r\n</p>\r\n\r\n \r\n   \r\n          </div>\r\n       \r\n       </article>\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryDetails;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}